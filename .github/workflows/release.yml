name: Build & Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to release (optional). If empty, the pushed tag name will be used.'
        required: false
        default: ''

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            artifact_name: linux-dist
          - os: windows-latest
            target: win
            artifact_name: windows-dist
          - os: macos-latest
            target: mac
            artifact_name: macos-dist
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install system dependencies (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential libpcap-dev pkg-config python3 imagemagick librsvg2-bin libgdk-pixbuf2.0-0 icoutils libpng-dev pngcrush
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew update
            brew install libpcap imagemagick icoutils
          fi

      - name: Generate icon.png from medidor.png (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          echo "Checking for medidor.png"
          if [ -f medidor.png ]; then
            echo "medidor.png found - generating icon.png"
            if command -v convert >/dev/null 2>&1; then
              convert medidor.png -resize 512x512 icon.png || convert medidor.png -resize 256x256 icon.png
            elif command -v magick >/dev/null 2>&1; then
              magick medidor.png -resize 512x512 icon.png || magick medidor.png -resize 256x256 icon.png
            elif command -v sips >/dev/null 2>&1; then
              # macOS fallback
              sips -Z 512 medidor.png --out icon.png
            else
              echo "No image conversion tool found (convert/magick/sips). Icon generation skipped."
            fi
            ls -la icon.png || true
          else
            echo "medidor.png not found in repo root; icon generation skipped"
          fi
        shell: bash

      - name: Generate icon.ico (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ -f icon.png ]; then
            echo "Generating icon.ico from icon.png"
            # create multiple sizes inside ico
            convert icon.png -background none -define icon:auto-resize=256,128,96,64,48,32,16 icon.ico || convert icon.png -resize 256x256 icon.ico
            ls -la icon.ico || true
          else
            echo "icon.png missing, skipping icon.ico generation"
          fi

      - name: Generate icon.icns (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          if [ -f icon.png ]; then
            echo "Generating icon.icns from icon.png"
            rm -rf icon.iconset || true
            mkdir -p icon.iconset
            sips -z 16 16 icon.png --out icon.iconset/icon_16x16.png
            sips -z 32 32 icon.png --out icon.iconset/icon_16x16@2x.png
            sips -z 32 32 icon.png --out icon.iconset/icon_32x32.png
            sips -z 64 64 icon.png --out icon.iconset/icon_32x32@2x.png
            sips -z 128 128 icon.png --out icon.iconset/icon_128x128.png
            sips -z 256 256 icon.png --out icon.iconset/icon_128x128@2x.png
            sips -z 256 256 icon.png --out icon.iconset/icon_256x256.png
            sips -z 512 512 icon.png --out icon.iconset/icon_256x256@2x.png
            sips -z 512 512 icon.png --out icon.iconset/icon_512x512.png
            sips -z 1024 1024 icon.png --out icon.iconset/icon_512x512@2x.png
            iconutil -c icns icon.iconset -o icon.icns || true
            ls -la icon.icns || true
          else
            echo "icon.png missing, skipping icon.icns generation"
          fi
        shell: bash

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Try multiple Chocolatey package names to install a pcap provider
          $ErrorActionPreference = 'Continue'
          $packages = @(
          @{ name = 'npcap'; args = '-y' },
          @{ name = 'npcap.install'; args = '-y' },
          @{ name = 'winpcap'; args = '-y' }
          )
  
          $installed = $false
          foreach ($p in $packages) {
          Write-Host "Attempting choco install $($p.name) $($p.args)"
          try {
              choco install $($p.name) $($p.args) --no-progress
              if ($LASTEXITCODE -eq 0 -or $LASTEXITCODE -eq 1641 -or $LASTEXITCODE -eq 3010) {
              Write-Host "Installed $($p.name) successfully"
              $installed = $true
              break
              }
          } catch {
              Write-Host "choco install $($p.name) failed: $($_.Exception.Message)"
          }
          }
  
          if (-not $installed) {
          Write-Host "No Chocolatey pcap package installed. Trying winget as a fallback..."
          try {
              if (Get-Command winget -ErrorAction SilentlyContinue) {
              Write-Host "winget found - attempting winget install Npcap.Npcap"
              winget install --id Npcap.Npcap -e --accept-package-agreements --accept-source-agreements
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "winget install succeeded"
                  $installed = $true
              }
              } else {
              Write-Host "winget not available on this runner"
              }
          } catch {
              Write-Host "winget install failed: $($_.Exception.Message)"
          }
          }
  
          if (-not $installed) {
          Write-Host "Warning: Could not install Npcap via package managers. Native builds may fail. Continuing..."
          }
        shell: pwsh

      - name: Install dependencies
        run: npm ci

      - name: Build renderer and TypeScript
        run: npm run build:all

      - name: Package (electron-builder)
        run: npx electron-builder --${{ matrix.target }} --x64 --publish=never

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            dist_electron/
            dist/
          retention-days: 1

  release:
    name: Create Draft Release and Attach Assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded artifacts
        run: |
          echo "Artifact structure:"
          find ./artifacts -type f -name "*" | head -20
          echo "Total files found:"
          find ./artifacts -type f | wc -l

      - name: Prepare release assets
        run: |
          # Create a clean releases directory
          mkdir -p release_assets
          
          # Copy and organize artifacts with better naming
          for os_dir in linux windows macos; do
            if [ -d "./artifacts/${os_dir}-dist" ]; then
              mkdir -p "release_assets/${os_dir}"
              cp -r "./artifacts/${os_dir}-dist"/* "release_assets/${os_dir}/" 2>/dev/null || true
            fi
          done
          
          echo "Final release assets structure:"
          ls -la release_assets/
          find release_assets/ -type f | head -20

      - name: Determine release tag
        id: tag_step
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "Using tag: ${{ github.event.inputs.tag_name }}"
          else
            echo "Using tag: ${GITHUB_REF#refs/tags/}"
          fi

      - name: Create Draft GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_step.outputs.tag }}
          name: ${{ steps.tag_step.outputs.tag }}
          draft: true
          files: |
            release_assets/**/*
            release_assets/**/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Done
        run: echo "Release created (draft) with artifacts attached."