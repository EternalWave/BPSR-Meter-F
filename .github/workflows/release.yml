name: Build & Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag to release (optional). If empty, the pushed tag name will be used.'
        required: false
        default: ''

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: windows-latest
            target: win
          - os: macos-latest
            target: mac
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install system dependencies (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential libpcap-dev pkg-config python3
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew update
            brew install libpcap
          fi

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Try multiple Chocolatey package names to install a pcap provider
          $ErrorActionPreference = 'Stop'
          $packages = @(
            @{ name = 'npcap'; args = '-y' },
            @{ name = 'npcap.install'; args = '-y' },
            @{ name = 'npcap'; args = '-y --pre' },
            @{ name = 'winpcap'; args = '-y' }
          )

          $installed = $false
          foreach ($p in $packages) {
            Write-Host "Attempting choco install $($p.name) $($p.args)"
            try {
              choco install $($p.name) $($p.args) --no-progress
              Write-Host "Installed $($p.name)"
              $installed = $true
              break
            } catch {
              Write-Host "choco install $($p.name) failed: $($_.Exception.Message)"
            }
          }

          if (-not $installed) {
            Write-Host "No Chocolatey pcap package installed. Trying winget as a fallback..."
            try {
              if (Get-Command winget -ErrorAction SilentlyContinue) {
                Write-Host "winget found — attempting winget install Npcap.Npcap"
                winget install --id Npcap.Npcap -e --accept-package-agreements --accept-source-agreements
                Write-Host "winget install succeeded"
                $installed = $true
              } else {
                Write-Host "winget not available on this runner"
              }
            } catch {
              Write-Host "winget install failed: $($_.Exception.Message)"
            }

            if (-not $installed) {
              Write-Host "winget fallback did not install Npcap. Trying direct download of the official Npcap installer..."
              $tmp = "$env:TEMP\\npcap-installer.exe"
              # Try a short list of likely installer versions hosted on nmap.org
              $urls = @(
                'https://nmap.org/npcap/dist/npcap-1.73.exe',
                'https://nmap.org/npcap/dist/npcap-1.72.exe',
                'https://nmap.org/npcap/dist/npcap-1.71.exe',
                'https://nmap.org/npcap/dist/npcap-1.55.exe'
              )

              foreach ($u in $urls) {
                try {
                  Write-Host "Attempting download $u"
                  Invoke-WebRequest -Uri $u -OutFile $tmp -UseBasicParsing -ErrorAction Stop
                  Write-Host "Downloaded installer to $tmp — running silent install"
                  $proc = Start-Process -FilePath $tmp -ArgumentList '/S' -Wait -PassThru -NoNewWindow
                  if ($proc.ExitCode -eq 0) {
                    Write-Host "Npcap installer exited 0 — assuming install succeeded"
                    $installed = $true
                    break
                  } else {
                    Write-Host "Npcap installer exited with code $($proc.ExitCode)"
                  }
                } catch {
                  Write-Host "Download or install failed for $u: $($_.Exception.Message)"
                }
              }

              if (-not $installed) {
                Write-Host "Warning: Could not install Npcap via direct download. Native builds may fail. Continuing..."
                exit 0
              }
            }
          }
        shell: powershell

      - name: Install dependencies
        run: npm ci

      - name: Build renderer and TypeScript
        run: npm run build:all

      - name: Package (electron-builder)
        # Use --${{ matrix.target }} to build the current platform target
        run: npx electron-builder --${{ matrix.target }} --x64 --publish=never

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-dist
          path: |
            dist_electron/**
            dist/**

  release:
    name: Create Draft Release and Attach Assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-dist
          path: ./artifacts/linux || ./artifacts/linux

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-dist
          path: ./artifacts/windows || ./artifacts/windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-dist
          path: ./artifacts/macos || ./artifacts/macos

      - name: List downloaded artifacts
        run: |
          echo "Linux files:" && ls -la artifacts/linux || true
          echo "Windows files:" && ls -la artifacts/windows || true
          echo "macOS files:" && ls -la artifacts/macos || true

      - name: Create Draft GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          # Prefer the manual input tag_name when provided, otherwise use the git ref name
          tag_name: ${{ github.event.inputs.tag_name != '' && github.event.inputs.tag_name || github.ref_name }}
          name: ${{ github.event.inputs.tag_name != '' && github.event.inputs.tag_name || github.ref_name }}
          draft: true
          files: |
            artifacts/linux/**
            artifacts/windows/**
            artifacts/macos/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Done
        run: echo "Release created (draft) with artifacts attached."
